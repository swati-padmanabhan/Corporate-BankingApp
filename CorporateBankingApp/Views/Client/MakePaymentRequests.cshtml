@model CorporateBankingApp.DTOs.BeneficiaryPaymentDTO
@using CorporateBankingApp.Enums

@{
    ViewBag.Title = "MakePaymentRequests";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .card {
        border: 1px solid var(--neutral-gray-light);
    }

    .btn-custom-purple {
        background-color: var(--primary-color);
        color: #fff;
        border: none;
        transition: background-color 0.3s;
    }

        .btn-custom-purple:hover {
            background-color: var(--primary-dark);
            color: white;
        }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 5px var(--primary-light);
    }

    .text-danger {
        font-weight: bold;
    }
</style>

<div class="container mt-5 pt-5">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card shadow-lg rounded">
                <div class="card-header text-white text-center" style="background-color: var(--primary-color);">
                    <!-- Icon Above Header -->
                    <div class="mb-2 display-5">
                        <i class="bi bi-cash-coin text-white"></i>
                    </div>
                    <h4>Pay to Beneficiary</h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("ViewBeneficiaryListForPayment", "Client", FormMethod.Post, new { @id = "paymentForm" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-group mb-3">
                            @Html.Label("Select Beneficiary:", new { @class = "form-label" })
                            @Html.DropDownList("BeneficiaryId",
                            new SelectList(Model.Beneficiaries, "Id", "BeneficiaryName"),
                            "Select a Beneficiary", new { @id = "Beneficiary_Id", @class = "form-select" })
                        </div>

                        <div class="form-group mb-3">
                            @Html.Label("Amount", new { @class = "form-label" })
                            <div class="input-group">
                                <span class="input-group-text" id="basic-addon1">
                                    <i class="bi bi-currency-rupee"></i>
                                </span>
                                @Html.TextBoxFor(m => m.Amount, new { @class = "form-control", type = "number", step = "0.01", min = "1", placeholder = "Enter amount" })
                            </div>
                            @Html.ValidationMessageFor(m => m.Amount, "", new { @class = "text-danger", @id="amountValidationError" })
                        </div>





                        <div class="text-center">
                            <button type="button" class="btn btn-custom-purple" id="payNow">
                                <i class="bi bi-credit-card"></i> Pay Now
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    $(document).ready(function () {
        $('#payNow').click(function (e) {
            e.preventDefault();

            // Clear previous error messages
            $('.error-message').remove();

            // Get the values from the form
            var beneficiaryId = $('#Beneficiary_Id').val();
            var amount = $('input[name="Amount"]').val();

            // Initialize an array to hold validation errors
            var errors = [];

            // Validate beneficiary selection
            if (!beneficiaryId) {
                errors.push({
                    field: '#Beneficiary_Id',
                    message: "Please select a beneficiary."
                });
            }

            if (!amount || amount <= 0) {
                errors.push({
                    field: '#amountValidationError',
                    message: "Please enter a valid amount greater than zero."
                });
            }

            // If there are validation errors, show them and exit the function
            if (errors.length > 0) {
                errors.forEach(function (error) {
                    $(error.field).after('<div class="error-message" style="color: red;">' + error.message + '</div>');
                });
                return; // Exit the function to prevent further execution
            }

            // AJAX request to initiate payment
            $.ajax({
                url: '@Url.Action("InitiatePayment", "Payment")',
                type: 'POST',
                data: {
                    beneficiaryId: beneficiaryId,
                    amount: amount
                },
                success: function (response) {
                    if (response.success) {
                        // Initiating Razorpay payment
                        var options = {
                            "key": response.razorpayKey, // Razorpay Key ID
                            "amount": response.amount, // Amount in paise
                            "currency": response.currency,
                            "name": "Corporate Banking",
                            "description": "Payment to Beneficiary",
                            "order_id": response.orderId, // Razorpay Order ID
                            "handler": function (razorpayResponse) {
                                // Payment verification AJAX call
                                $.ajax({
                                    url: '@Url.Action("PaymentVerification", "Payment")',
                                    type: 'POST',
                                    data: {
                                        razorpay_payment_id: razorpayResponse.razorpay_payment_id,
                                        razorpay_order_id: razorpayResponse.razorpay_order_id,
                                        razorpay_signature: razorpayResponse.razorpay_signature
                                    },
                                    success: function (result) {
                                        alert(result.message);
                                    }
                                });
                            }
                        };

                        var rzp1 = new Razorpay(options);
                        rzp1.open();
                    } else {
                        alert(response.message);
                    }
                }
            });
        });
    });
</script>


