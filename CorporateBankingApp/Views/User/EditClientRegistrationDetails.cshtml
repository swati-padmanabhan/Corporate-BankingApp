@model CorporateBankingApp.DTOs.ClientDTO

@{
    ViewBag.Title = "Edit Client Registration Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-xl px-4 mt-4">
    <div class="row">
        <div class="col-xl-4">
            <!-- Client Overview card -->
            <div class="card mb-4">
                <div class="card-header">Client Overview</div>
                <div class="card-body">
                    <h5 class="card-title">@Model.CompanyName</h5>
                    <p class="card-text">Email: @Model.Email</p>
                    <p class="card-text">Location: @Model.Location</p>
                    <p class="card-text">Balance: $@Model.Balance</p>
                    <div class="alert alert-warning">
                        <strong>Notice:</strong> Please ensure all documents are up to date to avoid service disruptions.
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-8">
            <!-- Account details card -->
            <div class="card mb-4">
                <div class="card-header">Account Details</div>
                <div class="card-body">
                    @using (Html.BeginForm("EditClientRegistrationDetails", "User", FormMethod.Post, new { enctype = "multipart/form-data", id = "editClientForm" }))
                    {
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            @Html.HiddenFor(model => model.Id)

                            <!-- Email -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.Email, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @id = "email" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                <span id="emailError" class="text-danger"></span>
                            </div>

                            <!-- Company Name -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.CompanyName, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control", @id = "companyName" } })
                                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
                                <span id="companyNameError" class="text-danger"></span>
                            </div>

                            <!-- Location -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.Location, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control", @id = "location" } })
                                @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                                <span id="locationError" class="text-danger"></span>
                            </div>

                            <!-- Contact Information -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.ContactInformation, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.ContactInformation, new { htmlAttributes = new { @class = "form-control", @id = "contactInformation" } })
                                @Html.ValidationMessageFor(model => model.ContactInformation, "", new { @class = "text-danger" })
                                <span id="contactInformationError" class="text-danger"></span>
                            </div>

                            <!-- Account Number -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.AccountNumber, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.AccountNumber, new { htmlAttributes = new { @class = "form-control", @id = "accountNumber" } })
                                @Html.ValidationMessageFor(model => model.AccountNumber, "", new { @class = "text-danger" })
                                <span id="accountNumberError" class="text-danger"></span>
                            </div>

                            <!-- Client IFSC -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.ClientIFSC, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.ClientIFSC, new { htmlAttributes = new { @class = "form-control", @id = "clientIFSC" } })
                                @Html.ValidationMessageFor(model => model.ClientIFSC, "", new { @class = "text-danger" })
                                <span id="clientIFSCError" class="text-danger"></span>
                            </div>

                            <!-- Balance -->
                            <div class="mb-3">
                                @Html.LabelFor(model => model.Balance, new { @class = "small mb-1" })
                                @Html.EditorFor(model => model.Balance, new { htmlAttributes = new { @class = "form-control", @id = "balance" } })
                                @Html.ValidationMessageFor(model => model.Balance, "", new { @class = "text-danger" })
                                <span id="balanceError" class="text-danger"></span>
                            </div>

                            <!-- Document Uploads -->
                            <div class="form-group row mb-3">
                                <div class="col-md-6">
                                    @Html.Label("Company ID Proof", htmlAttributes: new { @class = "control-label" })
                                    <span class="text-danger">*</span>
                                    <!-- Display existing document -->
                                    @if (Model.Documents != null && Model.Documents.Any(d => d.DocumentType == "Company Id Proof"))
                                    {
                                        <p>
                                            Current Document: <a href="javascript:void(0);" data-bs-toggle="modal" data-bs-target="#documentModal" onclick="showDocument('@Url.Content(Model.Documents.First(d => d.DocumentType == "Company Id Proof").FilePath)')">View</a>
                                        </p>
                                    }
                                    <!-- Option to upload a new document -->
                                    <input type="file" name="uploadedFiles1" class="form-control" />
                                    @Html.ValidationMessageFor(model => model.Document1, "", new { @class = "text-danger" })
                                </div>
                                <div class="col-md-6">
                                    @Html.Label("Address Proof", htmlAttributes: new { @class = "control-label" })
                                    <span class="text-danger">*</span>
                                    <!-- Display existing document -->
                                    @if (Model.Documents != null && Model.Documents.Any(d => d.DocumentType == "Address Proof"))
                                    {
                                        <p>
                                            Current Document: <a href="javascript:void(0);" data-bs-toggle="modal" data-bs-target="#documentModal" onclick="showDocument('@Url.Content(Model.Documents.First(d => d.DocumentType == "Address Proof").FilePath)')">View</a>
                                        </p>
                                    }
                                    <!-- Option to upload a new document -->
                                    <input type="file" name="uploadedFiles2" class="form-control" />
                                    @Html.ValidationMessageFor(model => model.Document2, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <!-- Save changes button with icon -->
                            <button class="btn btn-primary" type="submit" onclick="return validateForm()">
                                <i class="fas fa-save"></i> Save Changes
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="documentModal" tabindex="-1" aria-labelledby="documentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header primary-bg">
                <h5 class="modal-title text-light" id="documentModalLabel">Client Document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <iframe id="documentFrame" src="" width="100%" height="600px" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

<script src="~/Scripts/Script.js"></script>

<script>
    function validateFile(input, docType, errorElementId) {
        const file = input.files[0];
        const validExtensions = /(\.jpg|\.jpeg|\.png|\.pdf)$/i;
        const errorElement = document.getElementById(errorElementId);
        errorElement.textContent = ''; // Clear previous error message

        if (file) {
            if (file.size > 3 * 1024 * 1024) { // Check if file size is greater than 3MB
                errorElement.textContent = `${docType} must be less than 3MB.`;
                input.value = ''; // Clear the input
            } else if (!validExtensions.exec(file.name)) { // Check for valid file type
                errorElement.textContent = `Invalid file type for ${docType}. Only images and PDFs are allowed.`;
                input.value = ''; // Clear the input
            }
        }
    }

    function validateForm() {
        let isValid = true;

        // Clear previous error messages
        document.querySelectorAll('.text-danger').forEach(element => element.textContent = '');

        // Email validation
        const email = document.getElementById('email').value;
        if (!email) {
            document.getElementById('emailError').textContent = "Email is required.";
            isValid = false;
        } else if (!/^[^\s]+[^\s]+\.[^\s]+$/.test(email)) {
            document.getElementById('emailError').textContent = "Invalid email format.";
            isValid = false;
        }

        // Company Name validation
        const companyName = document.getElementById('companyName').value;
        if (!companyName) {
            document.getElementById('companyNameError').textContent = "Company Name is required.";
            isValid = false;
        }

        // Location validation
        const location = document.getElementById('location').value;
        if (!location) {
            document.getElementById('locationError').textContent = "Location is required.";
            isValid = false;
        }

        // Contact Information validation
        const contactInformation = document.getElementById('contactInformation').value;
        if (!contactInformation || !/^\d{10}$/.test(contactInformation)) {
            document.getElementById('contactInformationError').textContent = "Contact Information must be exactly 10 digits.";
            isValid = false;
        }

        // Account Number validation
        const accountNumber = document.getElementById('accountNumber').value;
        if (!accountNumber) {
            document.getElementById('accountNumberError').textContent = "Account Number is required.";
            isValid = false;
        } else if (!/^\d{12}$/.test(accountNumber)) {
            document.getElementById('accountNumberError').textContent = "Account Number must be exactly 12 digits.";
            isValid = false;
        }

        // Client IFSC validation
        const bankIFSC = document.getElementById('clientIFSC').value;
        const bankIFSCPattern = /^[A-Z]{4}0[A-Z0-9]{6}$/;
        if (!bankIFSC || !bankIFSCPattern.test(bankIFSC)) {
            document.getElementById('clientIFSCError').textContent = "Invalid Bank IFSC format.";
            isValid = false;
        }

        // Balance validation
        const balance = document.getElementById('balance').value;
        if (!balance) {
            document.getElementById('balanceError').textContent = "Balance is required.";
            isValid = false;
        } else if (isNaN(balance) || balance < 0) {
            document.getElementById('balanceError').textContent = "Balance must be a non-negative number.";
            isValid = false;
        }

        // Document validation
        const uploadedFiles1 = document.getElementById('uploadedFiles1').files.length;
        const uploadedFiles2 = document.getElementById('uploadedFiles2').files.length;

        if (uploadedFiles1 === 0) {
            document.getElementById('document1Error').textContent = "Company ID Proof is required.";
            isValid = false;
        }

        if (uploadedFiles2 === 0) {
            document.getElementById('document2Error').textContent = "Address Proof is required.";
            isValid = false;
        }

        return isValid;
    }

    function showDocument(filePath) {
        document.getElementById('documentFrame').src = filePath;
    }
</script>
